// npx PRISMA MIGRATE DEV reads the schema on schema.prisma file and creates a migrations folder
// in that migration folder, it generate a migatrion.sql file that push it automatically to the postgres DB
// this migrate dev, deletes all the previous data, there is other command for production

// when use npx prisma migrate dev it automatically runs the npx prisma generate command
// this PRISMA GENERATE takes the models/schema on schema.prisma and creates 
// typescript type for that schemas, ready to use on the api importing it from @prisma/client
// import { User } from '@prisma/client' - like this, we can use the a type created from the User Model

// npx PRISMA STUDIO creates an online client so the DB is explorable/editable from the browser

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email     String     @unique
  hash      String // Hashed password
  firstName String? // Its optional
  lastName  String?
  // Added automatically after creating the relation of userId with id in Bookmark model
  bookmarks Bookmark[]

  // This renames the DB to users
  @@map("users")
}

model Bookmark {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String
  description String?
  link        String

  // relation of n:1 (many bookmarks to 1 user)
  // We tell there is a relationship between this userId from bookmark, to the id of the User model
  userId Int
  user   User @relation(fields: [userId], references: [id])

  @@map("bookmarks")
}
